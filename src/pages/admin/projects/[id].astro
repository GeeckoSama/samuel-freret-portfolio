---
import { actions } from "astro:actions";
import ProjectForm from "../../../components/projects/project-form.astro";
import AdminLayout from "../../../layouts/AdminLayout.astro";

const id = Astro.params.id;
if (!id) return Astro.redirect("/projects");

const result = await Astro.callAction(actions.project.getProject, {
  id: id,
});
if (result.error) {
  console.log(result.error);
  return Astro.redirect("/admin/projects");
}
const project = result.data;
---

<AdminLayout title={"Modificatio nde " + project.title}>
  <div class='lg:card lg:bg-base-200 mx-auto overflow-x-auto lg:max-w-5xl'>
    <diV class='lg:card-body'>
      <!-- <div class='flex justify-end'>
        <button
          class='btn btn-error btn-outline'
          onclick='deleteDialog.showModal()'>Supprimer</button
        >
      </div> -->
      <form class='flex flex-col gap-4'>
        <ProjectForm project={project} />

        <button type='submit' class='btn btn-primary mt-10'>Enregistrer</button>
      </form>
    </diV>
  </div>
</AdminLayout>

<dialog id='deleteDialog' class='modal'>
  <div class='modal-box'>
    <h3 class='font-bold text-lg'>Confirmation de suppression</h3>
    <p class='py-4'>Êtes-vous sûr de vouloir supprimer ce projet ?</p>
    <div class='modal-action'>
      <form method='dialog'>
        <button class='btn btn-outline mr-2'>Annuler</button>
      </form>
      <button class='btn btn-error' id='confirmDelete'>Supprimer</button>
    </div>
  </div>
</dialog>

<script>
  import { actions } from "astro:actions";
  import { generatePath, uploadFile, uploadVideo } from "../../../utils/upload";
  import { navigate } from "astro:transitions/client";

  const form = document.querySelector("form");
  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    const id = formData.get("id") as string;
    console.log(id);

    const { data, error } = await actions.project.updateProject(formData);
    if (error || !data) {
      console.log(error);
      return;
    }

    const image_cover = formData.get("image_cover") as File;
    const svg_mask = formData.get("svg_mask") as File;
    const video = formData.get("video") as File;

    if (image_cover.name !== "") {
      const newImage_cover = await uploadFile(id, image_cover);
      updateProject({ image_cover: newImage_cover.ref.fullPath });
    }

    if (svg_mask.name !== "") {
      const newSvg_mask = await uploadFile(id, svg_mask);
      updateProject({ svg_mask: newSvg_mask.ref.fullPath });
    }

    if (video.name !== "") {
      const video_path = generatePath(id, video);
      uploadVideo(video_path, video, (videoURL: string) => {
        formData.set("video", videoURL);
        updateProject({ video: videoURL });
      });
    } else {
      navigate("/admin/projects");
    }

    async function updateProject(project: any) {
      const { data, error } = await actions.project.updateProjectWithoutForm({
        id,
        ...project,
      });
      if (error || !data) {
        console.log(error);
        return;
      }
      console.log(`Project updated with id ${data}`);
      navigate("/admin/projects");
    }
  });

  const confirmDeleteBtn = document.getElementById("confirmDelete");
  const projectId = new FormData(document.querySelector("form")!).get(
    "id"
  ) as string;
  confirmDeleteBtn?.addEventListener("click", async () => {
    const { data, error } = await actions.project.deleteProject({
      id: projectId,
    });
    if (error) {
      console.log(error);
      return;
    }
    navigate("/admin/projects");
  });
</script>
